// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  imageURL       String  @db.Text
  externalUserID String  @unique
  bio            String? @db.Text

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking  Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  stream Stream?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id           String  @id @default(uuid())
  name         String  @db.Text
  thumbnailURL String? @db.Text

  ingressID String? @unique
  serverURL String? @db.Text
  streamKey String? @db.Text

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userID String @unique
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userID])
  @@index([ingressID])
  @@fulltext([name])
}

model Follow {
  id          String @id @default(uuid())
  followerID  String
  followingID String

  follower  User @relation(name: "Following", fields: [followerID], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerID, followingID])
  @@index([followerID])
  @@index([followingID])
}

model Block {
  id        String @id @default(uuid())
  blockerID String
  blockedID String

  blocker User @relation(name: "Blocking", fields: [blockerID], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedID], references: [id], onDelete: Cascade)

  @@unique([blockerID, blockedID])
  @@index([blockerID])
  @@index([blockedID])
}
